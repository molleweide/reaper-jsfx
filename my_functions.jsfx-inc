@init

function resetAllNotes()(
  // loop through all notes
  loop(127,
    i += 1;
    vel = 80;
    midisend(0,$x80,i+vel*256);
  );
);

// check limits:  t < 0 ? t = 0 : t > 127 ? t = 127;
function transpose_up()(
    SINGLE_ROOT_NOTE < 127 ? (
      SINGLE_ROOT_NOTE += 1;
      );
  resetAllNotes();
);

function transpose_down()(
    SINGLE_ROOT_NOTE > 0 ? (
      SINGLE_ROOT_NOTE -= 1;
      );
  resetAllNotes();
);




function qmk_insideLeftSide(note)(
  retval = -1;
    (QMK_ROW_HIGH_L_START <= note && note <= QMK_ROW_HIGH_L_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 14;
      /* tmp_note = note - QMK_NOTE_SHIFT_NORMALIZE; */
    );
    (QMK_ROW_MID_L_START <= note && note <= QMK_ROW_MID_L_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 9;
    );
    (QMK_ROW_LOW_L_START <= note && note <= QMK_ROW_LOW_L_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );
    (QMK_ROW_BOTTOM_L_START <= note && note <= QMK_ROW_BOTTOM_L_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE;
    );
    QMK_THUMB_INNER_L1 == note ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE;
    );
  retval;
);

function qmk_insideRightSide(note)(
  retval = -1;
    (QMK_ROW_HIGH_R_START <= note && note <= QMK_ROW_HIGH_R_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 19;
    );
    (QMK_ROW_MID_R_START <= note && note <= QMK_ROW_MID_R_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 14;
    );
    (QMK_ROW_LOW_R_START <= note && note <= QMK_ROW_LOW_R_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 9;
    );
    (QMK_ROW_BOTTOM_R_START <= note && note <= QMK_ROW_BOTTOM_R_END) ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );
    QMK_THUMB_INNER_R1 == note ? (
      retval = note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );
  retval;
);

function filter_check(mode, note) (
  // if inside return int greater than 0 else return 0
  retval = 0;
    mode == MODE_QMK_SINGLE_BASIC ? ( ////////////////////////
      ((note >= QMK_SINGLE_LOW && note <= QMK_SINGLE_HIGH)
          || note == QMK_THUMB_INNER_L1 || note == QMK_THUMB_INNER_R1)
        ? retval = SINGLE_ROOT_NOTE;
    );
    mode == MODE_QMK_FULL_LINEAR ? ( ////////////////////////
      (note >= QMK_FULL_LOW && note <= QMK_FULL_HIGH)
        ? (
        retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE;
      );
    );
    mode == MODE_QMK_SPLIT_VEL_NOTE ? ( ///////////////////////
      R = qmk_insideRightSide(note);
      R > -1 ? (
        retval = SINGLE_ROOT_NOTE + R;
      ); // else we return 0 and note will be filtered out
    );
    mode == MODE_QMK_SPLIT_MULT_CH ? ( /////////////////////////
      R = qmk_insideRightSide(note);
      R > -1 ? (
        retval = SINGLE_ROOT_NOTE + R;
      ); // else we return 0 and note will be filtered out
    );

    mode == MODE_GRAND_PIANO_FULL ? (
      (note >= GRAND_PIANO_LOW && note <= GRAND_PIANO_HIGH)
      ? (
       retval = SINGLE_ROOT_NOTE + note - GPAND_PIANO_NOTE_SHIFT_NORMALIZE;
      );
    );
    retval;
);

function qmk_handleOtherKeys(mode, input)(
    mode == MODE_QMK_SPLIT_VEL_NOTE ? ( ///////////////////////
      L = qmk_insideLeftSide(input);
      L > -1 ? (
        L = L*127/18;
        L < 1 ? L = 1;
        L > 127 ? L = 127;
        GLOBAL_VEL = floor(L);
      ); // else we return 0 and note will be filtered out
    );
    mode == MODE_QMK_SPLIT_MULT_CH ? ( /////////////////////////
      L = qmk_insideLeftSide(input);
      L > -1 ? (
        L == 0 ? L = 1;
        L > 16 ? L = 16;
        GLOBAL_CH = L;
      ); // else we return 0 and note will be filtered out
    );

    mode == MODE_QMK_SINGLE_BASIC ? (
      input == KC_QMK_TRANSPOSE_THUMBS_UP ? transpose_up();
      input == KC_QMK_TRANSPOSE_THUMBS_DOWN? transpose_down();
    );
    input == KC_QMK_TRANSPOSE_RESET_1 ? SINGLE_ROOT_NOTE = 24;resetAllNotes();
    input == KC_QMK_TRANSPOSE_RESET_2 ? SINGLE_ROOT_NOTE = 36;resetAllNotes();
    input == KC_QMK_TRANSPOSE_RESET_3 ? SINGLE_ROOT_NOTE = 48;resetAllNotes();
    input == KC_QMK_TRANSPOSE_RESET_4 ? SINGLE_ROOT_NOTE = 60;resetAllNotes();
    input == KC_QMK_TRANSPOSE_RESET_5 ? SINGLE_ROOT_NOTE = 72;resetAllNotes();
    input == KC_QMK_TRANSPOSE_PINKY_UP ? transpose_up();
    input == KC_QMK_TRANSPOSE_PINKY_DOWN ? transpose_down();

    resetAllNotes(); // mv to if press KC_QMK_RESET_ALL_MIDI
);

function grand_handleOtherKeys(mode, input)(
  mode == MODE_GRAND_PIANO_FULL ? (
      input == KC_GRAND_TRANSPOSE_RESET ? SINGLE_ROOT_NOTE = 24;
      input == KC_GRAND_RESET_ALL_NOTES ? resetAllNotes();
      input == KC_GRAND_TRANSPOSE_UP ? transpose_up();
      input == KC_GRAND_TRANSPOSE_DOWN ? transpose_down();
  );
  resetAllNotes();
);
// QMK OUTPUT NOTE MAPPING
/* function qmk_computeNoteOut(mode, note)( */
/*     mode == MODE_QMK_SINGLE_BASIC ? ( */
/*       retval = SINGLE_ROOT_NOTE;// compute retval with transpose shift */
/*     ); */
/*     mode == MODE_QMK_FULL_LINEAR ? ( */
/*       // first subtract shift notes and then add ring */
/*       tmp_note = note - QMK_NOTE_SHIFT_NORMALIZE; */
/*       retval = SINGLE_ROOT_NOTE + tmp_note; */
/*     ); */
/*     mode == MODE_QMK_SPLIT_VEL_NOTE ? ( */
/*       // only check for right side here */
/*       retval = qmk_mapSplitNotesSingle(note); // + SINGLE_ROOT_NOTE <<<<<<<<<< */
/*     ); */
/*     mode == MODE_QMK_SPLIT_MULT_CH ? ( */
/*       // only check for right side here */
/*       retval = qmk_mapSplitNotesSingle(note); // TODO <<<<<<<<<<<<< */
/*     ); */
/*     retval; */
/* ); */
/*  */

/* function qmk_getLeftHandVelFromNoteIn(note)( */
/*   retval; */
/* ); */

/* function qmk_getVelOut(mode, note)( */
/*   mode == MODE_QMK_SPLIT_VEL_NOTE ? ( */
/*     retval = qmk_getLeftHandVelFromNoteIn(note); */
/*   ); */
/*   retval; */
/* ); */

function grand_computeNoteOut(mode, note)(
    mode == MODE_GRAND_PIANO_FULL ? (
       retval = SINGLE_ROOT_NOTE + note - GPAND_PIANO_NOTE_SHIFT_NORMALIZE;
    );
    retval;
);

