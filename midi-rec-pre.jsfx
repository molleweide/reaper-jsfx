desc: reaper-jsfx midi-rec-pre
author: molleweide
version: 1.0

import ./lib/variables.jsfx-inc
import ./lib/keyboard_model.jsfx-inc
import ./lib/keyboard_util.jsfx-inc
import ./lib/piano_util.jsfx-inc

import ./lib/midi_controller.jsfx-inc

// include personal device mappings
import ./midi_devices/midi_device_virtual_keyb.jsfx-inc
import ./midi_devices/midi_device_ergodox_ez.jsfx-inc
import ./midi_devices/mid_device_qmk.jsfx-inc
import ./midi_devices/mid_device_piano.jsfx-inc

// make sure midi events are sent to correct
// device map
import ./lib/handle_keys.jsfx-inc

//////////////////////////////////////////////////////////////////

slider1:24<1,127,1>ROOT
slider2:0<0,2,1{VIRTUAL_KEYBOARD,QMK,PIANO_FULL}>DEVICE
slider3:0<0,10,1{VKB_SINGLE,VKB_LINEAR,VKB_SPLIT_VEL,VKB_SPLIT_CH,QMK_SINGLE,QMK_FULL,QMK_SPLIT,QMK_SPLIT_CH,QMK_KIT,PIANO_FULL,PIANO_FULL_SPLIT}>MODE

out_pin:none
out_pin:none

@slider
SINGLE_ROOT_NOTE = slider1; // rename -> GLOBAL_ROOT
MIDI_DEVICE = slider2;
MODE = slider3;             // rename -> MIDI_DEVICE_MODE

@block
while (

  input = midirecv(offset,msg1,msg2,msg3);

  input ? (

    midi_in_type = msg1&TYPE_MASK;
    midi_in_channel = msg1&CHANNEL_MASK;
    midi_in_note = msg2;
    midi_in_vel = msg3;


    // note on /////////////////////////////////////////////
    midi_in_type == NOTE_ON && midi_in_vel > 0 ? (

      midi_out_note_on = handleMidiKeys(MODE, midi_in_note);

      (midi_out_note_on > -1) ? ( // IF MIDI NOTE <<<



        device_has_vel(MIDI_DEVICE) ? midi_out_vel = midi_in_vel : midi_out_vel = GLOBAL_VEL;
        midi_out_ch = GLOBAL_CH;
        midisend(offset,midi_in_type+midi_out_ch,midi_out_note_on,midi_out_vel);



      ):( // ELSE



        WAS_FILTERED[midi_in_note] = 1;
        handleControlKeys(MIDI_DEVICE, MODE, midi_in_note);



      );
    ):

    // NOTE OFF ////////////////////////////////////////////
    midi_in_type == NOTE_OFF || (midi_in_type == NOTE_ON && midi_in_vel == 0 ) ? (



      WAS_FILTERED[midi_in_note] ? (

        WAS_FILTERED[midi_in_note] = 0;



      ):(


          midi_out_note_off = handleMidiKeys(MODE, midi_in_note);

          (midi_out_note_on >= -1) ? (
              device_has_vel(MIDI_DEVICE) ? midi_out_vel = midi_in_vel : midi_out_vel = GLOBAL_VEL;
              midi_out_ch = GLOBAL_CH;
              midisend(offset,midi_in_type+midi_out_ch,midi_out_note_off,midi_out_vel);
          );
      ); // WAS FLT



    ):

    // MIDI CC ////////////////////////////////////////////
    PASS_THRU_CC ? (
        midisend(mpos, msg1, msg2, msg3);
    );
  ); // input
  input;
);
