desc: molleweide custom midi device preprocessor
author: molleweide
version: 1.0

/*
   LINKS

   - MIDI SPEC: http://www.petesqbsite.com/sections/express/issue18/midifilespart1.html
   - MIDI TUTORIAL BIG: https://www.admiralbumblebee.com/music/2018/02/08/Write-a-Reaper-MIDI-JSFX-from-scratch.html#for-programmers

   GOAL ////////////////////////////////////

   make it easy to update interaction >> let configs and templates arise over time.

   TODO ////////////////////////////////////

   create function that checks for equality of a set of different keys
   eg. noteIs(resetKey)?? where reset could be more than one value. so that I can move keys around the keyboard.
   >>> add transpose keys to pinky outside

   QMK ////////////////////////////////////

    test w/piano

    split note / vel

    split channel / notes

    split kit > add ability to select output ranges for drumkit



   VIM ////////////////////////////////////

   - make eel syntax into plugin >> publish to github
   - vim indent anything plugin?
   - article on indentation: http://psy.swansea.ac.uk/staff/carter/vim/vim_indent.htm
   - make plugin installable with all of the standard plugin managers

   oooh!! it seems it would be possible to create sort of like a mini vim language for setting up the
   midi instruments that I am using.

 */

slider1:48<1,127,1>: note select
slider2:0<0,2,1{QMK,GRAND_PIANO,DRUMKIT}>MIDI DEVICE
slider3:0<0,2,1{QMK_SINGLE,QMK_FULL,QMK_SPLIT}>device mode

out_pin:none
out_pin:none

@init

NOTE_OFF = 8;
NOTE_ON = 9;

WAS_FILTERED = 1024;  // array for storing which notes are filtered

PASS_THRU_CC = 0;

SINGLE_ROOT_NOTE = 24; // use this as the lowest note
TRANSPOSE_SHIFT = 0;

// device..............
// MIDI_DEVICE = 0;
QMK = 0;
GRAND_PIANO = 1;

// modes..........
QMK_SINGLE_OUT = 0;
QMK_FULL_LINEAR = 1;
QMK_SPLIT = 2;
GRAND_PIANO_FULL_MODE = 3;

// qmk variables
QMK_NOTE_SHIFT_NORMALIZE = 48; // i have to look this up
QMK_FULL_HIGH = 85;
QMK_FULL_LOW = 48;
QMK_SINGLE_HIGH = QMK_FULL_HIGH;
QMK_SINGLE_LOW = 56;

QMK_ROW_HIGH_L_START = 76;
QMK_ROW_HIGH_L_END = 80;
QMK_ROW_HIGH_R_START = 81;
QMK_ROW_HIGH_R_END = 85;
QMK_ROW_MID_L_start = 66;
QMK_ROW_MID_L_end = 70;
QMK_ROW_MID_R_start = 71;
QMK_ROW_MID_R_end = 75;
QMK_ROW_LOW_L_START = 56;
QMK_ROW_LOW_L_END = 60;
QMK_ROW_LOW_R_START = 61;
QMK_ROW_LOW_R_END = 65; ////////////////////////////
QMK_ROW_BOTTOM_L_START = 48; /////////////////////////
QMK_ROW_BOTTOM_L_END = 50;
QMK_ROW_BOTTOM_R_START = 53;
QMK_ROW_BOTTOM_R_END = 55;
QMK_THUMB_INNER_L1 = 51;
QMK_THUMB_INNER_R1 = 52;

// grand piano variables
GPAND_PIANO_NOTE_SHIFT_NORMALIZE = 12;
GRAND_PIANO_HIGH = 108;
GRAND_PIANO_LOW = 24;


//TRANSPOSE_RESET = ;
KC_TRANSPOSE_THUMBS_DOWN = 50;
KC_TRANSPOSE_THUMBS_UP = 53;
KC_TRANSPOSE_PINKY_DOWN = 110;
KC_TRANSPOSE_PINKY_UP = 115;
KC_TRANSPOSE_RESET_1 = 86;
KC_TRANSPOSE_RESET_2 = 87;
KC_TRANSPOSE_RESET_3 = 88;
KC_TRANSPOSE_RESET_4 = 89;
KC_TRANSPOSE_RESET_5 = 90;

// check limits:  t < 0 ? t = 0 : t > 127 ? t = 127;
function transpose_up()(
    SINGLE_ROOT_NOTE < 127 ? (
      SINGLE_ROOT_NOTE += 1;
      )
    );
function transpose_down()(
    SINGLE_ROOT_NOTE > 0 ? (
      SINGLE_ROOT_NOTE -= 1;
      )
    );

// rename function to `qmk_handleOtherKeys()`
function qmh_handleOtherKeys(mode, input)(
    ( mode == QMK_SINGLE_OUT || mode == QMK_FULL_LINEAR || mode == QMK_SPLIT ) ? (
      input == KC_TRANSPOSE_RESET_1 ? SINGLE_ROOT_NOTE = 24;
      input == KC_TRANSPOSE_RESET_2 ? SINGLE_ROOT_NOTE = 36;
      input == KC_TRANSPOSE_RESET_3 ? SINGLE_ROOT_NOTE = 48;
      input == KC_TRANSPOSE_RESET_4 ? SINGLE_ROOT_NOTE = 60;
      input == KC_TRANSPOSE_RESET_5 ? SINGLE_ROOT_NOTE = 72;
      input == KC_TRANSPOSE_PINKY_UP ? transpose_up();
      input == KC_TRANSPOSE_PINKY_DOWN ? transpose_down();
    );

    mode == QMK_SINGLE_OUT ? (
      input == KC_TRANSPOSE_THUMBS_UP ? transpose_up();
      input == KC_TRANSPOSE_THUMBS_DOWN? transpose_down();
    );
);

// RENAME TO NOTE ON / OFF INPUT GATE ??
function filter_check(mode, note) (
    mode == QMK_SINGLE_OUT ? (
      retval = (note < QMK_SINGLE_LOW || note > QMK_SINGLE_HIGH)
      && note != QMK_THUMB_INNER_L1 && note != QMK_THUMB_INNER_R1;
    );
    (mode == QMK_FULL_LINEAR || mode == QMK_SPLIT) ? (
      retval = note < QMK_FULL_LOW || note > QMK_FULL_HIGH;
    );
    mode == GRAND_PIANO_FULL_MODE ? (
      retval = note < GRAND_PIANO_LOW || note > GRAND_PIANO_HIGH;
    );
    retval;
);

// incoming notes range from 0 - 37
function qmk_mapSplitNotes(note)(
    // left side //////////////////
    (QMK_ROW_HIGH_L_START <= note && note <= QMK_ROW_HIGH_L_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 14;
      /* tmp_note = note - QMK_NOTE_SHIFT_NORMALIZE; */
    );
    (QMK_ROW_MID_L_START <= note && note <= QMK_ROW_MID_L_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 9;
    );
    (QMK_ROW_LOW_L_START <= note && note <= QMK_ROW_LOW_L_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );
    (QMK_ROW_BOTTOM_L_START <= note && note <= QMK_ROW_BOTTOM_L_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE;
    );
    QMK_THUMB_INNER_L1 == note ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE;
    );
    // right side ////////////////
    (QMK_ROW_HIGH_R_START <= note && note <= QMK_ROW_HIGH_R_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 19;
    );
    (QMK_ROW_MID_R_START <= note && note <= QMK_ROW_MID_R_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 14;
    );
    (QMK_ROW_LOW_R_START <= note && note <= QMK_ROW_LOW_R_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 9;
    );
    (QMK_ROW_BOTTOM_R_START <= note && note <= QMK_ROW_BOTTOM_R_END) ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );
    QMK_THUMB_INNER_R1 == note ? (
      retval = SINGLE_ROOT_NOTE + note - QMK_NOTE_SHIFT_NORMALIZE - 4;
    );

  retval;
);

// QMK OUTPUT NOTE MAPPING
function qmk_computeNoteOut(mode, note)(
    mode == QMK_SINGLE_OUT ? (
      retval = SINGLE_ROOT_NOTE;// compute retval with transpose shift
    );
    mode == QMK_FULL_LINEAR ? (
      // first subtract shift notes and then add ring
      tmp_note = note - QMK_NOTE_SHIFT_NORMALIZE;
      retval = SINGLE_ROOT_NOTE + tmp_note;
    );
    mode == QMK_SPLIT ? (
      retval = qmk_mapSplitNotes(note);
    );
    mode == GRAND_PIANO_FULL_MODE ? (
      tmp_note = note - GPAND_PIANO_NOTE_SHIFT_NORMALIZE;
      retval = 24;
    );
    retval;
);


@slider
/* SINGLE_ROOT_NOTE = slider1; */
/* MIDI_DEVICE = slider2; */
/* MODE = slider3; */

MIDI_DEVICE = 0;
MODE = 2;

@block

// TODO
//
//  put midi cc pass thru at the end??
while (
    input = midirecv(offset,msg1,msg23);
    input ? ( // check if current track channel?

      statusHi = (msg1/16)|0;
      statusLo = (msg1-(statusHi*16))|0;
      note = msg23&127;
      vel =(msg23/256)|0;

      // QMK ////////////////////////////////////////////////////////////////////
      MIDI_DEVICE == QMK ? (

        MODE == QMK_SINGLE_OUT ? (
           // NOTE ONs ////////////////////////////////////////////////////////
          statusHi == NOTE_ON && vel > 0 ? (
            filter = filter_check(MODE, note);
            (!filter) ? (
              // create a function compute note
              // note = SINGLE_ROOT_NOTE; // SINGLE_ROOT_NOTE + TRANSPOSE_SHIFT
              note = qmk_computeNoteOut(MODE, note);
              midisend(offset,msg1,note+vel*256);
              ):(
                WAS_FILTERED[note] = 1;
                qmh_handleOtherKeys(MODE,note);
                );
            ):

          // NOTE OFFs /////////////////////////////////////////////////////
          statusHi == NOTE_OFF || (statusHi == NOTE_ON && vel == 0 ) ? (

            WAS_FILTERED[note] ? (
              WAS_FILTERED[note] = 0;
              ):(
                //note = SINGLE_ROOT_NOTE; // SINGLE_ROOT_NOTE + TRANSPOSE_SHIFT
                note = qmk_computeNoteOut(MODE, note);
                midisend(offset,msg1,note+vel*256);
                );
            );

          PASS_THRU_CC ? (
              midisend(mpos, msg1, msg23);
              );
          ); // QMK_SINGLE_OUT

        MODE == QMK_FULL_LINEAR ? (
              // NOTE ONs ////////////////////////////////////////////////////////
              statusHi == NOTE_ON && vel > 0 ? (
                filter = filter_check(MODE, note);
                (!filter) ? (
                  note = qmk_computeNoteOut(MODE, note);
                  midisend(offset,msg1,note+vel*256);
                  ):(
                    WAS_FILTERED[note] = 1;
                    qmh_handleOtherKeys(MODE,note);
                    );
                ): // NOTE_ON

              // NOTE OFFs /////////////////////////////////////////////////////
              statusHi == NOTE_OFF || (statusHi == NOTE_ON && vel == 0 ) ? (

                WAS_FILTERED[note] ? (
                  WAS_FILTERED[note] = 0;
                  ):(
                    note = qmk_computeNoteOut(MODE, note);
                    midisend(offset,msg1,note+vel*256);
                    );
                ); // NOTE_OFF

              PASS_THRU_CC ? (
                  midisend(mpos, msg1, msg23);
          ); // PASS_THRU_CC
        ); // QMK_FULL_LINEAR
        MODE == QMK_SPLIT ? (
              // NOTE ONs ////////////////////////////////////////////////////////
              statusHi == NOTE_ON && vel > 0 ? (
                filter = filter_check(MODE, note);
                (!filter) ? (
                  note = qmk_computeNoteOut(MODE, note);
                  midisend(offset,msg1,note+vel*256);
                  ):(
                    WAS_FILTERED[note] = 1;
                    qmh_handleOtherKeys(MODE,note);
                    );
                ): // NOTE_ON

              // NOTE OFFs /////////////////////////////////////////////////////
              statusHi == NOTE_OFF || (statusHi == NOTE_ON && vel == 0 ) ? (

                WAS_FILTERED[note] ? (
                  WAS_FILTERED[note] = 0;
                  ):(
                    note = qmk_computeNoteOut(MODE, note);
                    midisend(offset,msg1,note+vel*256);
                    );
                ); // NOTE_OFF

              PASS_THRU_CC ? (
                  midisend(mpos, msg1, msg23);
          ); // PASS_THRU_CC
        ); // QMK_SPLIT_NOTE_AND_VEL
              /* MODE == QMK_SPLIT_MULT_CH_OUT ? (); */
              /* MODE == QMK_DRUM_KIT ? (); */
              );

              // GRAND_PIANO ////////////////////////////////////////////////////////////////////

              //MIDI_DEVICE == GRAND_PIANO ? (); // MIDI_DEVICE == PIANO
              ); // input ? ()
              input;
              );
